package beans;

import org.apache.camel.Exchange;
import org.apache.camel.Message;
import org.apache.camel.processor.aggregate.AggregationStrategy;
import java.util.List;
import java.util.ArrayList;
import java.io.IOException;
import java.io.FileNotFoundException;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;

public class EverbankParallelAggregator implements AggregationStrategy {

	private static final String SAVE_TO_HEADER = "saveToHeader";
	private static final String ACCUMULATOR_HEADER = "rfpAccumulator";

	private String getAccumulatorHeader(Exchange exchange) {
		String accumulatorHeader = ACCUMULATOR_HEADER;
		Message message = exchange.getIn();
		if (message != null) {
			String headerValue = message.getHeader(SAVE_TO_HEADER, String.class);
			if (headerValue != null)
				accumulatorHeader = headerValue;
			else {
				message.setHeader(SAVE_TO_HEADER, ACCUMULATOR_HEADER);
			}
		}
		return accumulatorHeader;
	}
	
	private List<String> getAccumulator(Exchange exchange) {
		List<String> accumulator;
		String accumulatorHeader = getAccumulatorHeader(exchange);
		Message inMessage = exchange.getIn();
		if (inMessage == null) {
			throw new RuntimeException("!!!!! Unexpected NULL inMessage !!!!!");
		} else if (inMessage.getHeader(accumulatorHeader) == null) {
			printMsg("accumulator = null - creating new accumulator ");
			printMsg("accumulatorHeader = " + accumulatorHeader);
			printMsg("accumulatorHeaderValue(before) =  " + inMessage.getHeader(accumulatorHeader));
			accumulator = new ArrayList<String>();
			inMessage.setHeader(accumulatorHeader, accumulator);
			printMsg("accumulatorHeaderValue SET =  " + inMessage.getHeader(accumulatorHeader).toString());
		} else {
			printMsg("using existing accumulator ");
			printMsg("accumulatorHeader = " + accumulatorHeader);
			printMsg("accumulatorHeaderValue(before) =  " + inMessage.getHeader(accumulatorHeader));
			accumulator = (List<String>) inMessage.getHeader(accumulatorHeader);
		}
		return accumulator;
	}

	private void appendBody(List<String> accumulator, Message msg) {
		printMsg("appendBody : msg = null: " + (new Boolean(msg == null)).toString());
		printMsg("appendBody : body = null: " + (new Boolean(msg.getBody() == null)).toString());
		if (msg.getBody() == null){
			accumulator.add("NULL BODY");
		} else if (msg.getBody() instanceof File) {
			accumulator.add(readFile((File) msg.getBody()));
		} else {
			printMsg("adding to accumulator ");
			accumulator.add(msg.getBody(String.class));
		}
	}
		
	private String readFile( File file ) {
	    BufferedReader reader;
		try {
			reader = new BufferedReader(new FileReader(file));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			return e.toString();
		}
	    String line  = null;
	    StringBuilder stringBuilder = new StringBuilder();
	    String ls = System.getProperty("line.separator");
	    try {
			while( ( line = reader.readLine() ) != null ) {
			    stringBuilder.append( line );
			    stringBuilder.append( ls );
			}
		} catch (IOException e) {
			e.printStackTrace();
			return e.toString();
		}
	    return stringBuilder.toString();
	 }

	public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {
		List<String> accumulator;

		// glorified x = x + 1
		Exchange returnExchange; 
		if (oldExchange == null) {
			printMsg("null oldExchange ");
			returnExchange = newExchange.copy();
			if (newExchange.getIn() != null) {
				printMsg("create newExchange.msg.body = " + newExchange.getIn().getBody());
			}
			else {
				printMsg("create newExchange.msg = NULL");
			}
		}
		else {
			printMsg("Using oldExchange ");
			returnExchange = oldExchange;
		}
		returnExchange = (oldExchange == null) ? newExchange : oldExchange;
		accumulator = getAccumulator(returnExchange);
		appendBody(accumulator, newExchange.getIn());
		printMsg("accumulatorHeaderValue SET =  " + returnExchange.getIn().getHeader("rfpAccumulator").toString());
		printMsg("accumulatorHeaderValue SET size =  " + ((List<String>) returnExchange.getIn().getHeader("rfpAccumulator")).size());
		printMsg("accumulator.size = " + Integer.toString(accumulator.size()));
		List<String> msgAccumulator = (List<String>) returnExchange.getIn().getHeader("rfpAccumulator");
		printMsg("accumulatorHeader = " + getAccumulatorHeader(returnExchange));
		printMsg("accumulatorHeaderValue(after) = " + returnExchange.getIn().getHeader(getAccumulatorHeader(returnExchange)));
		printMsg("message.accumulator.size = " + Integer.toString(msgAccumulator.size()));
		return returnExchange;
	}


	private void printMsg(String msg) {
		System.out.println("### EverbankParallelAggregator ### " + msg);
	}
}
